openapi: '3.0.3'
info:
  title: EventAPI
  version: 1.2.1
  description: 'API for EvenTN, the open source event application for the city of Trento'
servers:
  - description: Live Render Hosting
    url: https://eventn-backend.onrender.com
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DavideDaCol/EventAPI/1.2.1
  - description: Locally hosted backend server
    url: http://localhost:8080
paths:
  /test:
    get:
      tags: [Test the API] 
      description: test endpoint, checks if the server is up
      responses:
        '200':
          description: server is up
          content:
            application/json:
              schema:
                type: string
                example: yay!
  /account/registration:
    post:
      tags: [Account]
      summary: Add a new user
      description: given a username and password in the request body, this endpoint adds a new user into the database. The user will still need to log in to receive its JWT.
      requestBody:
        description: the user's chosen credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The nickname the user wants to use
                  example: userName01
                email:
                  type: String
                  description: The user's chosen email address. must be valid
                  example: mariorossi@gmail.com
                phone:
                  type: string
                  description: A valid phone number. must match the user's locale
                  example: 1234567890
                name:
                  type: string
                  description: The user's legal name
                  example: Mario
                surname:
                  type: string
                  description: The user's legal surname
                  example: Rossi
                password: 
                  type: string
                  description: password of the user.
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/UserID"
                  - example: created user abc123def456
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account:
    delete:
      tags: [Account] 
      summary: Delete a logged in user permanently
      description: This endpoint deletes a user and all associated data from the database. The request can only be made by an authenticated user to himself; noone can delete someone else's information.
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/UserID"
                  - example: deleted user abc123def456
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags: [Account] 
      summary: Update user info
      description: Changes the user's username, name, surname or email address to the ones supplied in the request body. Only works if the user is authenticated.
      security: 
        - bearerAuth: []
      requestBody:
        description: the informations to update
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account/password:
    put:
      tags: [Account] 
      summary: Update user password
      description: Changes the user's password to the ones supplied in the request body. Only works if the user is authenticated and if the new password is both valid and different from the old one
      security: 
        - bearerAuth: []
      requestBody:
        description: the informations to update
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/all:
    get:
      tags: [User] 
      summary: Get all users
      description: Returns all of the users which have an account. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  users:
                    $ref: "#/components/schemas/User"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account/login:
    post:
      tags: [Account] 
      summary: Login via credentials
      description: Allows the user to log in via username (or email) and password. After the login is completed, the JWT is automatically saved in the browser and will be used by any future requests if needed. 
      requestBody:
        description: username and password of the user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Password is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/search/{name}:
    parameters:
          - name: name
            in: path
            required: true
            schema:
              type: string
              example: USERNAME_HERE
    get:
      tags: [User] 
      summary: Search a user
      description: returns the info of the user corresponding to the supplied username.
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid UserID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/info:
    get:
      tags: [User] 
      summary: Get user information
      description: Returns the information of the user which made the request. User needs to be logged in to call this endpoint.
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid UserID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /friends:
    get:
      tags: [Friends] 
      summary: Get all friends
      description: Returns all of the friends of the user who made the request. User needs to be logged in to call this endpoint.
      security: 
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: the UserID of every friend of the user
                items:
                  type: string
                  example: 123abc456def
        '400':
          description: Invalid User ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /friends/{friendId}:
    parameters:
          - name: friendId
            in: path
            required: true
            schema:
              type: string
              example: FRIENDID_HERE
    post:
      tags: [Friends] 
      summary: Add a new friend
      description: Adds the user corresponding to the supplied friendId to the friend list of the user that calls this endpoint. User must be logged in to call this endpoint.
      security:
      - bearerAuth: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: added user Alice to the friends of Bob
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Supplied Friend ID is not valid or already added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User or Friend Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/events:
    get:
      tags: [User] 
      summary: Get saved events
      description: returns the events a user has saved
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: the eventID of every event the user saved
                items:
                  type: string
                  example: 456def789ghi
        '400':
          description: Invalid User ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Auth Token Mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/events/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
              example: EVENTID_HERE
    post:
      tags: [User] 
      summary: Save an event
      description: adds the supplied event to a user
      security:
      - bearerAuth: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: the eventID of the event the user saved
                example: added event 456def789ghi
        '400':
          description: Event is invalid or already present
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Auth Token Mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event or User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [User] 
      summary: Removes saved event
      description: removes the supplied event from the saved events list of a user
      security:
      - bearerAuth: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: the eventID of the event the user removed
                example: removed event 456def789ghi
        '400':
          description: Event is invalid or not present
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Auth Token Mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event or User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events:
    post:
      tags: [Events] 
      summary: Create a new event
      description: Creates a new event given the supplied information. User needs to be authenticated to call this endpoint.
      security: 
      - bearerAuth: []
      requestBody:
        description: the event information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                eventStart:
                  type: string
                eventLength:
                  type: string
                eventDescription:
                  type: string
                eventTag:
                  type: string
                xcoord:
                  type: number
                ycoord:
                  type: number
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: created event def456ghi789
        '403':
          description: Auth token mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Event info is not formatted correctly (Bad Request)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/image:
    post:
      tags: [Events]
      summary: Add image to event
      description: allows to upload an image to the external content delivery network and bind its url to the event object
      security: 
      - bearerAuth: []
      requestBody:
        description: the event information
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                eventImage:
                  type: string
                  format: binary
                eventId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: image uploaded succesfully
                  path:
                    type: string
                    example: https://image.com
        '400':
          description: supplied info is not formatted correctly (Bad Request)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Auth token mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Supplied data does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/all:
    get:
      tags: [Events] 
      summary: Get all events
      description: Returns all of the events in the database.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: the eventID of every event
                items:
                  type: string
                  example: 456def789ghi
        '404':
          description: No Events Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/info/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
              example: EVENTID_HERE
    get:
      tags: [Events] 
      summary: Get event info
      description: Returns all of the available information regarding the event that matches the supplied eventId.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Invalid Event ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
              example: EVENTID_HERE
    put:
      tags: [Events] 
      summary: Update event info
      description: Given a subset of event information, this endpoint replaces the original event (the one that matches the supplied eventId) info with the info supplied in the request body. For this endpoint to work, the caller needs to be both logged in and the creator of the original event.
      security:
      - bearerAuth: []
      requestBody:
        description: Any of the required fields needed to create an event; see Event schema.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: modified event def456ghi789
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [Events] 
      summary: Delete an event
      description: Deletes the event matching the supplied eventId permanently. For this endpoint to work, the caller needs to be both logged in and the creator of the original event.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: invalid eventId or creator/user mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/counter/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
              example: EVENTID_HERE
    patch:
      tags: [Events] 
      summary: Change attendance
      description: Adds or removes one to the attendance counter of the event that matches the supplied eventId. The user needs to be logged in for this endpoint to work.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: added attendance to event def456ghi789
        '400':
          description: invalid eventId or user is already going
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /eventCodes/all:
    get:
      tags: [Event Codes] 
      summary: Get all the event codes
      description: Returns a list of all the event codes that are in the database, both active and not. The active codes can be used to publish a new event.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventCode"
  /eventCodes/validate-code:
    post:
      tags: [Event Codes] 
      summary: Validate an event code
      description: Makes sure that the supplied code is actually valid (as in registered in the database and not used already)
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Code is valid!
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /eventCodes/create-code:
    post:
      tags: [Event Codes] 
      summary: Create an event code
      description: Generates a new random event code and supplies it to the database.
      security:
      - bearerAuth: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Created code 1a2b3c
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /eventCodes/invalidate-code:
    post:
      tags: [Event Codes] 
      summary: Use code for an event
      description: Sets the isValid flag to false and binds the eventID to the code object
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: code 1a2b3c has been associated to event 123abc456def
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oc/openData:
    get:
      tags: [Operator]
      summary: Get Open Data
      description: sends a csv formatted response containing all available data for all events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                example: "<CSV File contents>"
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No events found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserID:
      type: string
      description: the unique identifier of every user
      example: abc123def456
    Login:
      required:
        - usernameOrEmail
        - password
      type: object
      properties:
        usernameOrEmail:
          type: string
          description: username or email of the user
        password:
          type: string
          description: password in plain text; must contain at least 6 characters, 1 lower case letter, 1 upper case letter, 1 number and 1 symbol
    User:
      required:
        - id
        - username
        - name
        - surname
        - email
        - friends
        - events
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        username:
          type: string
          description: the user's chosen nickname
          example: UserName01
        name:
          type: string
          description: the user's legal name
          example: Mario
        surname:
          type: string
          description: the user's legal surname
          example: Rossi
        email:
          type: string
          description: email address of the user
          example: address@facsimil.com
        friends:
          type: array
          items:
            type: string
          description: array with all the unique identifiers of the user's friends
        events:
          type: array
          items:
            type: string
          description: array with all the unique identifiers of the user's saved events
        isAdmin:
          type: boolean
          description: wether the user is an administrator ("operatore comunale")
    Event:
      required:
        - eventName
        - eventStart
        - eventLength
        - eventDescription
        - eventPosition
        - eventPresence
        - eventTag
        - eventCreatedBy
      type: object
      properties:
        eventName:
          type: string
          description: name of the event
          example: Sample Event
        eventImage:
          type: string
          description: URL to the image of the event
          example: https://image.com
        eventStart:
          type: string
          description: event start date
          example: 2024-12-26T23:15:30.000Z
        eventLength:
          type: string
          description: event length (date and time of the end)
          example: 2024-12-27T23:15:30.000Z
        eventDescription:
          type: string
          description: informations about the event
          example: The description of the sample event will be here. 
        eventPosition:
          type: array
          items:
            type: number
          description: main position of the event, given as an array of floats
          example: [46.092996,11.123657]
        eventPresence:
          type: integer
          description: the amount of people that intend to take part to the event
          example: 15
        eventTag:
          $ref: "#/components/schemas/Tag"
        eventCreatedBy:
          $ref: "#/components/schemas/UserID"
    Tag:
      type: string
      enum:
        - Musica
        - Fastival
        - Sport
        - Conferenza
        - Sagra
        - Comune
      description: type of the event
    EventCode:
      required:
        - code
        - isValid
      type: object
      properties:
        code:
          type: string
          description: a unique code generated to allow the publication of an event
          example: 654fed321cba
        isValid:
          type: boolean
          description: signals wether the code has already been used or not
        eventID:
          type: string
          description: if the code has been used, this is the event that used it
          example: 456def789ghi
    Error:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: a generic error given in non-200 type requests. logs the error message.
          example: error details